- name: Group for django site is present
  group: name={{ django_group }}

- name: User for django site is present
  user: name={{ django_user  }} createhome=yes

- name: Media dir for django site is present
  file: path={{ django_media_root }} state=directory owner={{ django_user }} mode=0755

- name: Basic django requirements are installed
  apt: name={{ item }}
  with_items:
    - python3-virtualenv
    - python{{django_python_version}}-dev
    - zip # jest wymagany
    - pandoc
    - memcached
    - libmemcached-dev


- name: Virtualenv is created
  command: virtualenv --python=python{{ django_python_version }} {{ django_venv_dir }}
  become: yes
  become_user: "{{ django_user }}"
  args:
    creates: "{{ django_venv_dir }}"

- name: Virtualenv wrapper for execution of scripts is created
  template: src=vexec dest={{ django_home_dir }}/vexec mode=755
  become: yes  
  become_user: "{{ django_user }}"

- name: Pip is upgraded in virtualenv
  command: "{{ django_home_dir }}/vexec pip install --upgrade pip"
  become: yes
  become_user: "{{ django_user }}"

- name: Wheel is installed in virtual environment
  pip: virtualenv={{ django_venv_dir }} name=wheel
  become: yes
  become_user: "{{ django_user }}"

- include: config.yml
  tags: ['config']

- name: BPP package is installed
  command: "{{ django_home_dir }}/vexec pip install --pre --upgrade bpp-iplweb"
  # Ponizsze bylo uzywane przy instalacji z prywatnego repo
  # --extra-index-url http://dev.iplweb.pl:8080/ --trusted-host dev.iplweb.pl
  become: yes
  become_user: "{{ django_user }}"
  tags: ['django-depends']
  environment:
    LANG: pl_PL.UTF-8
    LC_ALL: pl_PL.UTF-8

- name: Database is migrated
  command: "{{ django_manage_py }} migrate --noinput"
  tags: ['django-migrate']

- name: Site name for sites framework is set up
  command: "{{ django_manage_py }} set_site_name --domain \"{{ django_hostname }}\" --name \"{{ django_site_name }}\""

- include: supervisor.yml
  tags: ['supervisor',]

- include: nginx.yml
  tags: ['nginx',]

- include: cron.yml
  tags: ['cron',]

- name: Check if any processess running
  shell: supervisorctl status {{ supervisor_group_name }}:* | grep RUNNING | wc -l
  register: supervisor_processess_running
  tags: ['supervisor',]

- name: Send HUP signal to running processess
  shell: supervisorctl signal HUP {{ supervisor_group_name }}:*
  when: supervisor_processess_running.stdout|int == supervisor_no_processess
  tags: ['supervisor',]

- name: Restart supervisor if different number of running procs
  shell: ls
  notify: supervisor restart all
  when: supervisor_processess_running.stdout|int != supervisor_no_processess
  tags: ['supervisor',]
